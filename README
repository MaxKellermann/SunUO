SunUO README
============

(c) 2005 Max Kellermann <max@duempel.org>

$Id$


What is SunUO?
--------------

SunUO is a free Ultima Online server, based on RunUO.


Getting SunUO
-------------

You can download SunUO on the home page:

 http://max.kellermann.name/projects/sunuo/


Installing SunUO
----------------

Download and install the binary RunUO package, version 1.0.0:

 http://www.runuo.com/downloads/files/runuo-releases/RunUO-1.0.0.zip

Unzip it somewhere, and copy the file SunUO.exe into the same
directory. Now run:

 mono SunUO.exe

SunUO and RunUO are compatible.


Installing Mono 1.1.3
---------------------

Most linux distributions don't have Mono 1.1 yet. Mono 1.0 is not
stable enough for SunUO. Manual installation is not hard; you need:

- gcc
- GNU make
- glib 2.0 (development files)
- wget

On Debian, the following command installs everything you need:

 apt-get install gcc make libglib2.0-dev wget

The Mono installation can now be performed:

 wget http://www.go-mono.com/archive/1.1.3/mono-1.1.3.tar.gz
 tar xzf mono-1.1.3.tar.gz
 cd mono-1.1.3
 ./configure --prefix=/usr/local
 make
 make install

If nothing went wrong, Mono is now installed in /usr/local/bin/mono,
and is ready to power SunUO.


Features
--------

SunUO has the following new features compared to RunUO:

** Portability **

SunUO runs with Mono, e.g. on Linux. RunUO has a lot of bugs which
prevent this.

** New directory structure **

SunUO tries to manage its files better; this development is far from
finished, and mimics the FHS:

 ./etc          configuration files, managed by the administrator
 ./local        local (customized?) data for this shard, e.g. scripts
 ./var          files which are managed and modified by SunUO
 ./var/log      log files
 ./var/cache    cache, e.g. precompiled script libraries
 ./var/backup   world saves


** Multiple script libraries **

Every directory below ./local/src/ may contain a separate script
library; additionally, DLL files from ./local/lib/ are loaded. This
splits up the base RunUO scripts from your own custom scripts.

This has a big advantage if you are developing scripts: SunUO
recompiles only the script library you selected. SunUO starts up much
faster than RunUO for this reason.

Example:
 RunUO base scripts: ./Scripts/
 custom library 1: ./local/src/foo/
 custom library 2: ./local/src/bar/
 custom binary library: ./local/lib/test.dll

The compiled .DLL files are written to ./var/cache/lib/ - SunUO will
not recompile if it finds a compiled .DLL file and no script has been
modified since the last compilation.

The script library located in ./Scripts is internally named "legacy",
and the core library is called "core". No other libraries may use
these names.


** Single configuration file **

In RunUO, much of the configuration is done by editing the ./Scripts/
source codes. That makes upgrading a nightmare. SunUO tries to put as
much as possible into the file ./etc/sunuo.xml, although this is
limited currently, because compatibility with RunUO is
important. SunUO creates this file on its first run.


Advanced
--------

** Excluding source codes and classes **

If you want to disable some items or source codes, you can use the
following configuration in ./etc/sunuo.xml:

 <libraries>
   <library name="foo">
     <ignore-source name="Bar.cs"/>
     <ignore-type name="Blubb"/>
   </library>
 </libraries>

This tells SunUO not to compile the file "Bar.cs", and to ignore the
type "Blubb". You can use this to disable commands or to disable items
in the game.


** Separate login server from shard server **

To make SunUO ignore the AuthID, configure:

 <login>
   <ignore-auth-id/>
 </login>

This allows you to run the login server and the shard server on
different machines. This is safe, because both check the password
independently. It is however important that the account databases on
both servers are the same.


Porting a shard to SunUO
------------------------

You can seamlessly port your shard from RunUO to SunUO and back, they
are compatible. Just execute SunUO.exe instead of RunUO.exe.

There are a few minor changes regarding script compilation and
backups, which are meant to be improvements; please read the
"Features" section thoroughly, to find out more about this.

** Making [restart work **

On Unix / Linux, server restart does not work. This is because .NET
assemblies cannot be run directly, you have to call the "mono" wrapper
("mono SunUO.exe"), unless you have BINFMT_MISC configured correctly,
but that's a solution for the Linux wizards.

Solution: edit the following files:

 ./Scripts/Misc/CrashGuard.cs
 ./Scripts/Misc/AutoRestart.cs
 ./Scripts/Gumps/AdminGump.cs

And replace:

 Process.Start( Core.ExePath );

by:

 Process.Start( "mono", Core.ExePath );


** Making [restart work, with BINFMT_MISC **

If your linux kernel supports BINFMT_MISC (check if the file
/proc/sys/fs/binfmt_misc/register exists), you don't need to edit
scripts. The following command activates BINFMT_MISC for Mono:

 echo ':CLR:M::MZ::/usr/local/bin/mono:' > /proc/sys/fs/binfmt_misc/register

You may have to change the path to the mono binary. You should add
this command to your startup scripts, because the change is gone after
a reboot.


** Making customized houses work **

RunUO imports code from "zlib.dll" on windows. On Linux, library names
are different, it is named "libz.so" there. To make that work, create
a symbolic link with RunUO's favorite name:

 ln -s /usr/lib/libz.so.1 /opt/sunuo/libzlib.so


Compiling SunUO
---------------

If you are on Unix with Mono, edit the file config.mk and change the
paths. Then type:

 make

Note that the resulting executable does not work on Windows. I am yet
unsure if this is a Mono MCS bug or a Microsoft.NET bug. On windows,
run the file "compile.bat". If that does not work, edit "compile.bat"
and check if the "csc.exe" location is correct. The executable
compiled on Windows also runs on Mono.


Legal
-----

Copyright 2005 Max Kellermann <max@duempel.org>
based on RunUO (C) The RunUO Software Team

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
